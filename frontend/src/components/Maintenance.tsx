import { useState } from 'react';
import { Card } from './ui/card';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';
import { Badge } from './ui/badge';
import { Search, ListTodo, Calendar, CheckCircle2, AlertCircle, Clock, ArrowLeft, X, Plus, PackageOpen } from 'lucide-react';
import { Checkbox } from './ui/checkbox';
import { CreateMaintenanceDialog } from './CreateMaintenanceDialog';
import { Notification } from './Notification';

interface ChecklistItem {
  id: string;
  task: string;
  completed: boolean;
}

interface MaintenanceRecord {
  id: string;
  product: string;
  maintenanceType: string;
  dueInDays: number;
  status: 'Geplant' | 'In Bearbeitung' | 'Abgeschlossen' | 'Überfällig';
  notes: string;
  lastMaintenance?: string;
  checklist: ChecklistItem[];
  instructions?: string;
}

interface MaintenanceProps {
  locationName: string;
}

// Auto-generated maintenance for expiring items
const expiringItems = [
  { product: 'Sandwiches', expiryDate: '2025-11-15', dueInDays: 1 }, // 14 days before expiry
  { product: 'Trinkwasser (Lager A)', expiryDate: '2025-12-01', dueInDays: 17 },
];

const autoGeneratedMaintenance: MaintenanceRecord[] = expiringItems.map((item, idx) => ({
  id: `AUTO-${idx + 1}`,
  product: item.product,
  maintenanceType: 'Ablaufkontrolle',
  dueInDays: item.dueInDays,
  status: item.dueInDays <= 0 ? 'Überfällig' : item.dueInDays <= 3 ? 'In Bearbeitung' : 'Geplant',
  notes: `Automatisch generiert: Artikel läuft am ${item.expiryDate} ab`,
  lastMaintenance: undefined,
  instructions: 'Artikel auf Verfallsdatum prüfen und ggf. entsorgen oder austauschen. Neue Bestellung einleiten falls notwendig.',
  checklist: [
    { id: 'ac1', task: 'Verfallsdatum überprüfen', completed: false },
    { id: 'ac2', task: 'Artikel auf Qualität prüfen', completed: false },
    { id: 'ac3', task: 'Entscheidung: Entsorgen oder verlängern', completed: false },
    { id: 'ac4', task: 'Bei Bedarf Nachbestellung einleiten', completed: false },
  ]
}));

const maintenanceData: MaintenanceRecord[] = [
  ...autoGeneratedMaintenance,
  { 
    id: 'MAINT-003', 
    product: 'Notstromaggregate', 
    maintenanceType: 'Wartung', 
    dueInDays: -3, 
    status: 'Überfällig', 
    notes: 'Ölwechsel und Funktionstest', 
    lastMaintenance: '2025-07-20',
    instructions: 'Regelmäßige Wartung gemäß Herstellervorgaben. Besondere Vorsicht bei Ölstand und Filter.',
    checklist: [
      { id: 'c1', task: 'Ölstand prüfen', completed: false },
      { id: 'c2', task: 'Ölfilter wechseln', completed: false },
      { id: 'c3', task: 'Luftfilter reinigen', completed: false },
      { id: 'c4', task: 'Funktionstest durchführen', completed: false },
      { id: 'c5', task: 'Batterieladung prüfen', completed: false },
    ]
  },
  { 
    id: 'MAINT-004', 
    product: 'Hygiene-Sets', 
    maintenanceType: 'Kontrolle', 
    dueInDays: -6, 
    status: 'Abgeschlossen', 
    notes: 'Verfallsdatum geprüft, keine Beanstandungen', 
    lastMaintenance: '2025-07-25',
    instructions: 'Monatliche Kontrolle aller Hygieneartikel auf Vollständigkeit und Verfallsdatum.',
    checklist: [
      { id: 'c1', task: 'Verfallsdatum prüfen', completed: true },
      { id: 'c2', task: 'Vollständigkeit überprüfen', completed: true },
      { id: 'c3', task: 'Beschädigte Artikel aussortieren', completed: true },
    ]
  },
  { 
    id: 'MAINT-002', 
    product: 'Trinkwassertanks', 
    maintenanceType: 'Reinigung', 
    dueInDays: 2, 
    status: 'In Bearbeitung', 
    notes: 'Desinfektion und Qualitätskontrolle', 
    lastMaintenance: '2025-09-01',
    instructions: 'Tanks vollständig entleeren, mit Desinfektionsmittel behandeln und Wasserqualität testen.',
    checklist: [
      { id: 'c1', task: 'Tank vollständig entleeren', completed: true },
      { id: 'c2', task: 'Innenreinigung durchführen', completed: true },
      { id: 'c3', task: 'Desinfektionsmittel auftragen', completed: false },
      { id: 'c4', task: 'Wasserqualität testen', completed: false },
      { id: 'c5', task: 'Dokumentation erstellen', completed: false },
    ]
  },
  { 
    id: 'MAINT-001', 
    product: 'Feldbetten', 
    maintenanceType: 'Inspektion', 
    dueInDays: 5, 
    status: 'Geplant', 
    notes: 'Routineprüfung aller mechanischen Teile', 
    lastMaintenance: '2025-08-15',
    instructions: 'Alle Feldbetten auf mechanische Defekte, Stabilität und Sauberkeit überprüfen.',
    checklist: [
      { id: 'c1', task: 'Gestelle auf Stabilität prüfen', completed: false },
      { id: 'c2', task: 'Scharniere und Verbindungen kontrollieren', completed: false },
      { id: 'c3', task: 'Liegeflächen auf Beschädigungen prüfen', completed: false },
      { id: 'c4', task: 'Reinigung durchführen', completed: false },
    ]
  },
  { 
    id: 'MAINT-005', 
    product: 'Schlafsäcke', 
    maintenanceType: 'Reinigung', 
    dueInDays: 8, 
    status: 'Geplant', 
    notes: 'Professionelle Reinigung aller Schlafsäcke', 
    lastMaintenance: '2025-05-10',
    instructions: 'Externe Reinigungsfirma beauftragen. Alle Schlafsäcke vor Versand zählen und kennzeichnen.',
    checklist: [
      { id: 'c1', task: 'Anzahl dokumentieren', completed: false },
      { id: 'c2', task: 'Beschädigte aussortieren', completed: false },
      { id: 'c3', task: 'Reinigungsfirma beauftragen', completed: false },
      { id: 'c4', task: 'Nach Rückkehr Qualität prüfen', completed: false },
    ]
  },
  { 
    id: 'MAINT-006', 
    product: 'Medizinische Masken', 
    maintenanceType: 'Kontrolle', 
    dueInDays: 15, 
    status: 'Geplant', 
    notes: 'Lagerbestandskontrolle und Verfallsdatum', 
    lastMaintenance: '2025-08-01',
    instructions: 'Monatliche Bestandsaufnahme mit Fokus auf korrekte Lagerung und Ablaufdaten.',
    checklist: [
      { id: 'c1', task: 'Bestand zählen', completed: false },
      { id: 'c2', task: 'Verfallsdatum prüfen', completed: false },
      { id: 'c3', task: 'Lagerungsbedingungen kontrollieren', completed: false },
    ]
  },
];

// Available products for maintenance
const availableProducts = [
  'Feldbetten',
  'Schlafsäcke',
  'Decken',
  'Hygiene-Sets',
  'Windeln',
  'Sandwiches',
  'Trinkwasser',
  'Trinkwassertanks',
  'Masken',
  'Desinfektionsmittel',
  'Notstromaggregate',
  'Medizinische Masken',
  'Tische',
  'Stühle',
];

export function Maintenance({ locationName }: MaintenanceProps) {
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('Alle');
  const [selectedMaintenance, setSelectedMaintenance] = useState<MaintenanceRecord | null>(null);
  const [checklistState, setChecklistState] = useState<{ [key: string]: boolean }>({});
  const [createDialogOpen, setCreateDialogOpen] = useState(false);
  const [notification, setNotification] = useState<{ show: boolean; title: string; message?: string; type?: 'success' | 'error' | 'info' }>({
    show: false,
    title: '',
  });

  const handleCreateMaintenance = (data: any) => {
    console.log('Neue Wartung erstellt:', data);
    setNotification({
      show: true,
      title: 'Wartungs-Checkliste erstellt',
      message: `Die Checkliste für "${data.product}" wurde erfolgreich erstellt.`,
      type: 'success',
    });
  };

  // Sort by due date (most urgent first)
  const sortedMaintenance = [...maintenanceData].sort((a, b) => a.dueInDays - b.dueInDays);

  const filteredMaintenance = sortedMaintenance.filter(item => {
    const matchesSearch = 
      item.product.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.maintenanceType.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesStatus = statusFilter === 'Alle' || item.status === statusFilter;
    
    return matchesSearch && matchesStatus;
  });

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'Geplant':
        return <Badge className="bg-blue-100 text-blue-800 hover:bg-blue-100">Geplant</Badge>;
      case 'In Bearbeitung':
        return <Badge className="bg-yellow-100 text-yellow-800 hover:bg-yellow-100">In Bearbeitung</Badge>;
      case 'Abgeschlossen':
        return <Badge className="bg-green-100 text-green-800 hover:bg-green-100">Abgeschlossen</Badge>;
      case 'Überfällig':
        return <Badge className="bg-red-100 text-red-800 hover:bg-red-100">Überfällig</Badge>;
      default:
        return <Badge>{status}</Badge>;
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'Geplant':
        return <Clock className="w-4 h-4 text-blue-600" />;
      case 'In Bearbeitung':
        return <AlertCircle className="w-4 h-4 text-yellow-600" />;
      case 'Abgeschlossen':
        return <CheckCircle2 className="w-4 h-4 text-green-600" />;
      case 'Überfällig':
        return <AlertCircle className="w-4 h-4 text-red-600" />;
      default:
        return null;
    }
  };

  const getDueInText = (days: number) => {
    if (days < 0) {
      const absDays = Math.abs(days);
      return absDays === 1 ? '1 Tag überfällig' : `${absDays} Tagen überfällig`;
    } else if (days === 0) {
      return 'Heute fällig';
    } else if (days === 1) {
      return '1 Tag';
    } else {
      return `${days} Tagen`;
    }
  };

  const getDueInColor = (days: number) => {
    if (days < 0) return 'text-red-600';
    if (days <= 3) return 'text-orange-600';
    if (days <= 7) return 'text-yellow-600';
    return 'text-slate-600';
  };

  const handleChecklistChange = (itemId: string, checked: boolean) => {
    setChecklistState(prev => ({ ...prev, [itemId]: checked }));
  };

  const stats = [
    { label: 'In Bearbeitung', value: maintenanceData.filter(m => m.status === 'In Bearbeitung').length, color: 'yellow' },
    { label: 'Überfällig', value: maintenanceData.filter(m => m.status === 'Überfällig').length, color: 'red' },
  ];

  if (selectedMaintenance) {
    const completedCount = selectedMaintenance.checklist.filter(
      item => checklistState[item.id] ?? item.completed
    ).length;
    const totalCount = selectedMaintenance.checklist.length;
    const progress = (completedCount / totalCount) * 100;

    return (
      <div className="p-8">
        <Button
          variant="ghost"
          onClick={() => setSelectedMaintenance(null)}
          className="mb-6 gap-2"
        >
          <ArrowLeft className="w-4 h-4" />
          Zurück zur Übersicht
        </Button>

        <div className="mb-8">
          <div className="flex items-start justify-between mb-4">
            <div>
              <h1 className="mb-2">{selectedMaintenance.product}</h1>
              <p className="text-slate-600">{selectedMaintenance.maintenanceType} - {locationName}</p>
            </div>
            <div className="flex items-center gap-2">
              {getStatusIcon(selectedMaintenance.status)}
              {getStatusBadge(selectedMaintenance.status)}
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2 space-y-6">
            <Card className="p-6">
              <h3 className="text-lg mb-4 flex items-center gap-2">
                <ListTodo className="w-5 h-5" />
                Wartungs-Checkliste
              </h3>
              
              <div className="mb-4">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm text-slate-600">Fortschritt</span>
                  <span className="text-sm">{completedCount} von {totalCount}</span>
                </div>
                <div className="w-full bg-slate-200 rounded-full h-2">
                  <div 
                    className="bg-blue-600 h-2 rounded-full transition-all"
                    style={{ width: `${progress}%` }}
                  />
                </div>
              </div>

              <div className="space-y-3">
                {selectedMaintenance.checklist.map((item) => (
                  <div key={item.id} className="flex items-start gap-3 p-3 rounded-lg border border-slate-200 hover:bg-slate-50">
                    <Checkbox
                      id={item.id}
                      checked={checklistState[item.id] ?? item.completed}
                      onCheckedChange={(checked) => handleChecklistChange(item.id, checked as boolean)}
                      className="mt-0.5"
                    />
                    <label
                      htmlFor={item.id}
                      className={`flex-1 text-sm cursor-pointer ${
                        (checklistState[item.id] ?? item.completed) ? 'line-through text-slate-500' : 'text-slate-900'
                      }`}
                    >
                      {item.task}
                    </label>
                  </div>
                ))}
              </div>
            </Card>

            {selectedMaintenance.instructions && (
              <Card className="p-6">
                <h3 className="text-lg mb-3">Anweisungen</h3>
                <p className="text-slate-600">{selectedMaintenance.instructions}</p>
              </Card>
            )}
          </div>

          <div className="space-y-6">
            <Card className="p-6">
              <h3 className="text-lg mb-4">Details</h3>
              <div className="space-y-4">
                <div>
                  <p className="text-xs text-slate-500 mb-1">Wartungs-ID</p>
                  <p className="text-sm">{selectedMaintenance.id}</p>
                </div>
                <div>
                  <p className="text-xs text-slate-500 mb-1">Fällig in</p>
                  <p className={`text-sm ${getDueInColor(selectedMaintenance.dueInDays)}`}>
                    {getDueInText(selectedMaintenance.dueInDays)}
                  </p>
                </div>
                <div>
                  <p className="text-xs text-slate-500 mb-1">Letzte Wartung</p>
                  <p className="text-sm">{selectedMaintenance.lastMaintenance || '-'}</p>
                </div>
                <div>
                  <p className="text-xs text-slate-500 mb-1">Notizen</p>
                  <p className="text-sm text-slate-600">{selectedMaintenance.notes}</p>
                </div>
              </div>
            </Card>

            <div className="flex gap-3">
              <Button className="flex-1 bg-green-600 hover:bg-green-700">
                <CheckCircle2 className="w-4 h-4 mr-2" />
                Abschließen
              </Button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="p-8">
      <div className="flex justify-between items-start mb-8">
        <div>
          <h1 className="mb-2">Wartungen - {locationName}</h1>
          <p className="text-slate-600">Wartungsplanung und -historie für diesen Lagerstandort</p>
        </div>
        <Button
          onClick={() => setCreateDialogOpen(true)}
          className="bg-blue-600 hover:bg-blue-700 gap-2"
        >
          <Plus className="w-4 h-4" />
          Neue Checkliste
        </Button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
        {stats.map((stat, index) => {
          const colorClasses = {
            yellow: 'bg-yellow-100 text-yellow-600',
            red: 'bg-red-100 text-red-600',
          };
          return (
            <Card key={index} className="p-6">
              <div className="flex items-center gap-4">
                <div className={`${colorClasses[stat.color as keyof typeof colorClasses]} p-3 rounded-lg`}>
                  <ListTodo className="w-6 h-6" />
                </div>
                <div>
                  <p className="text-slate-600 text-sm">{stat.label}</p>
                  <p className="text-2xl">{stat.value}</p>
                </div>
              </div>
            </Card>
          );
        })}
      </div>

      <Card className="p-6">
        <div className="mb-6 flex gap-4">
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4" />
            <Input
              placeholder="Suche nach Produkt oder Wartungstyp..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            className="px-4 py-2 border border-slate-200 rounded-lg text-sm"
          >
            <option value="Alle">Alle Status</option>
            <option value="Geplant">Geplant</option>
            <option value="In Bearbeitung">In Bearbeitung</option>
            <option value="Abgeschlossen">Abgeschlossen</option>
            <option value="Überfällig">Überfällig</option>
          </select>
        </div>

        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Status</TableHead>
                <TableHead>Produkt</TableHead>
                <TableHead>Wartungstyp</TableHead>
                <TableHead>Fällig in</TableHead>
                <TableHead>Letzte Wartung</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredMaintenance.map((item) => (
                <TableRow 
                  key={item.id} 
                  className="hover:bg-slate-50 cursor-pointer"
                  onClick={() => setSelectedMaintenance(item)}
                >
                  <TableCell>
                    <div className="flex items-center gap-2">
                      {getStatusIcon(item.status)}
                      {getStatusBadge(item.status)}
                    </div>
                  </TableCell>
                  <TableCell>
                    <span className="font-semibold text-slate-900">{item.product}</span>
                  </TableCell>
                  <TableCell>{item.maintenanceType}</TableCell>
                  <TableCell>
                    <div className="flex items-center gap-2">
                      <Calendar className="w-4 h-4 text-slate-400" />
                      <span className={getDueInColor(item.dueInDays)}>
                        {getDueInText(item.dueInDays)}
                      </span>
                    </div>
                  </TableCell>
                  <TableCell className="text-slate-600 text-sm">
                    {item.lastMaintenance || '-'}
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>

        {filteredMaintenance.length === 0 && (
          <div className="text-center py-12 text-slate-500">
            <ListTodo className="w-12 h-12 mx-auto mb-4 text-slate-300" />
            <p>Keine Wartungen gefunden</p>
          </div>
        )}
      </Card>

      {/* Auto-generated maintenance info banner */}
      {autoGeneratedMaintenance.length > 0 && (
        <Card className="p-4 mt-6 bg-blue-50 border-blue-200">
          <div className="flex items-center gap-3">
            <PackageOpen className="w-5 h-5 text-blue-600" />
            <div className="flex-1">
              <p className="text-sm font-semibold text-blue-900">
                Automatische Wartungen
              </p>
              <p className="text-xs text-blue-700 mt-1">
                {autoGeneratedMaintenance.length} Wartung(en) wurden automatisch für ablaufende Artikel erstellt (2 Wochen vor Ablaufdatum)
              </p>
            </div>
          </div>
        </Card>
      )}

      <CreateMaintenanceDialog
        open={createDialogOpen}
        onClose={() => setCreateDialogOpen(false)}
        onCreate={handleCreateMaintenance}
        availableProducts={availableProducts}
      />

      <Notification
        show={notification.show}
        onClose={() => setNotification({ ...notification, show: false })}
        title={notification.title}
        message={notification.message}
        type={notification.type}
      />
    </div>
  );
}
